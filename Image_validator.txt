# --- Image Similarity Validator using Structural Similarity (SSIM) ---

# GOAL: Create a robust, standalone function to compare two images and 
# assign a numeric similarity score. This is the validation step for the MLOps pipeline.

import cv2
import numpy as np
from skimage.metrics import structural_similarity as ssim

# --- Setup: Mock Image Generation (for immediate testing) ---

def generate_mock_image(color, width=300, height=300, text=""):
    """Creates a simple, colored square image with optional text."""
    img = np.zeros((height, width, 3), dtype=np.uint8)
    img[:, :] = color
    if text:
        font = cv2.FONT_HERSHEY_SIMPLEX
        # Ensure text color is distinct from background (using white)
        cv2.putText(img, text, (50, height // 2), font, 1, (255, 255, 255), 2, cv2.LINE_AA)
    return img

def calculate_ssim(imgA, imgB):
    """
    Calculates the Structural Similarity Index Measure (SSIM) between two images.
    
    SSIM is generally preferred over simple metrics like Mean Squared Error 
    (MSE) because it better aligns with human visual perception.
    
    Args:
        imgA (np.ndarray): The first image.
        imgB (np.ndarray): The second image.
        
    Returns:
        float: The SSIM score (1.0 = identical, 0.0 = completely different).
    """
    # 1. Convert to Grayscale
    # SSIM often works best on grayscale images as it focuses on structure
    # and contrast rather than exact color values.
    grayA = cv2.cvtColor(imgA, cv2.COLOR_BGR2GRAY)
    grayB = cv2.cvtColor(imgB, cv2.COLOR_BGR2GRAY)
    
    # 2. Check Dimensions
    # This is critical. SSIM requires both images to have the exact same size.
    if grayA.shape != grayB.shape:
        print("Error: Images must have the same dimensions for comparison.")
        return 0.0
    
    # 3. Calculate SSIM
    # full=True returns the SSIM score and the SSIM map (for visualization)
    (score, diff_map) = ssim(grayA, grayB, full=True)
    
    return score

# --- Test Scenarios ---

# 1. Frame 2 (The Real Target Frame) - Target for the SSIM test
TARGET_COLOR = (128, 128, 0) # Dark Cyan
target_frame = generate_mock_image(TARGET_COLOR, text="Target Frame (Real F2)")

# 2. The Ideal Generated Frame (Should match perfectly: SSIM ≈ 1.0)
ideal_generated_frame = generate_mock_image(TARGET_COLOR, text="Ideal Generated F2")

# 3. A Very Poorly Generated Frame (Should score low: SSIM ≈ 0.0)
poor_generated_frame = generate_mock_image((0, 255, 0), text="Bad Generated F2") # Bright Green

# 4. A Partially Similar Generated Frame (Blend of Target and a completely different color)
# This simulates a blend, which is a common interpolation error.
blend_color = (TARGET_COLOR[0] // 2, TARGET_COLOR[1], 255) # Half Cyan, Half Red
partially_similar_frame = generate_mock_image(blend_color, text="Blended Generated F2")


# --- Execution ---

print("--- Frame Validation Results ---")

# Scenario A: Perfect Match (Should be close to 1.0)
score_perfect = calculate_ssim(target_frame, ideal_generated_frame)
print(f"A. SSIM Score (Target vs. Ideal Match): {score_perfect:.4f}")

# Scenario B: Poor Match (Should be close to 0.0)
score_poor = calculate_ssim(target_frame, poor_generated_frame)
print(f"B. SSIM Score (Target vs. Poor Match): {score_poor:.4f}")

# Scenario C: Blended/Partial Match (Should be between 0.0 and 1.0)
score_blend = calculate_ssim(target_frame, partially_similar_frame)
print(f"C. SSIM Score (Target vs. Partial Match): {score_blend:.4f}")

# NOTE: To run this script, you need two libraries:
# pip install opencv-python numpy scikit-image
